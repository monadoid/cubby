/*! tailwindcss v4.1.14 | MIT License | https://tailwindcss.com */
@layer properties;
@layer theme, base, components, utilities;
@layer theme {
  :root, :host {
    --font-sans: ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',
    'Noto Color Emoji';
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New',
    monospace;
    --color-red-500: oklch(63.7% 0.237 25.331);
    --color-yellow-500: oklch(79.5% 0.184 86.047);
    --color-blue-500: oklch(62.3% 0.214 259.815);
    --color-blue-600: oklch(54.6% 0.245 262.881);
    --color-blue-700: oklch(48.8% 0.243 264.376);
    --color-gray-200: oklch(92.8% 0.006 264.531);
    --color-gray-300: oklch(87.2% 0.01 258.338);
    --color-gray-400: oklch(70.7% 0.022 261.325);
    --color-gray-500: oklch(55.1% 0.027 264.364);
    --color-gray-600: oklch(44.6% 0.03 256.802);
    --color-gray-700: oklch(37.3% 0.034 259.733);
    --color-gray-900: oklch(21% 0.034 264.665);
    --color-black: #000;
    --color-white: #fff;
    --spacing: 0.25rem;
    --container-md: 28rem;
    --container-lg: 32rem;
    --container-4xl: 56rem;
    --text-xs: 0.75rem;
    --text-xs--line-height: calc(1 / 0.75);
    --text-sm: 0.875rem;
    --text-sm--line-height: calc(1.25 / 0.875);
    --text-base: 1rem;
    --text-base--line-height: calc(1.5 / 1);
    --text-lg: 1.125rem;
    --text-lg--line-height: calc(1.75 / 1.125);
    --text-xl: 1.25rem;
    --text-xl--line-height: calc(1.75 / 1.25);
    --text-2xl: 1.5rem;
    --text-2xl--line-height: calc(2 / 1.5);
    --text-3xl: 1.875rem;
    --text-3xl--line-height: calc(2.25 / 1.875);
    --text-4xl: 2.25rem;
    --text-4xl--line-height: calc(2.5 / 2.25);
    --text-6xl: 3.75rem;
    --text-6xl--line-height: 1;
    --font-weight-medium: 500;
    --font-weight-semibold: 600;
    --font-weight-bold: 700;
    --radius-md: 0.375rem;
    --radius-lg: 0.5rem;
    --radius-xl: 0.75rem;
    --default-transition-duration: 150ms;
    --default-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
  }
}
@layer base {
  *, ::after, ::before, ::backdrop, ::file-selector-button {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    border: 0 solid;
  }
  html, :host {
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji');
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }
  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }
  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }
  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }
  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }
  b, strong {
    font-weight: bolder;
  }
  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }
  small {
    font-size: 80%;
  }
  sub, sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  sub {
    bottom: -0.25em;
  }
  sup {
    top: -0.5em;
  }
  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }
  :-moz-focusring {
    outline: auto;
  }
  progress {
    vertical-align: baseline;
  }
  summary {
    display: list-item;
  }
  ol, ul, menu {
    list-style: none;
  }
  img, svg, video, canvas, audio, iframe, embed, object {
    display: block;
    vertical-align: middle;
  }
  img, video {
    max-width: 100%;
    height: auto;
  }
  button, input, select, optgroup, textarea, ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    border-radius: 0;
    background-color: transparent;
    opacity: 1;
  }
  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }
  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }
  ::file-selector-button {
    margin-inline-end: 4px;
  }
  ::placeholder {
    opacity: 1;
  }
  @supports (not (-webkit-appearance: -apple-pay-button))  or (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentcolor;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }
  textarea {
    resize: vertical;
  }
  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }
  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }
  ::-webkit-datetime-edit {
    display: inline-flex;
  }
  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }
  ::-webkit-datetime-edit, ::-webkit-datetime-edit-year-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }
  ::-webkit-calendar-picker-indicator {
    line-height: 1;
  }
  :-moz-ui-invalid {
    box-shadow: none;
  }
  button, input:where([type='button'], [type='reset'], [type='submit']), ::file-selector-button {
    appearance: button;
  }
  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {
    height: auto;
  }
  [hidden]:where(:not([hidden='until-found'])) {
    display: none !important;
  }
}
@layer utilities {
  .modal {
    @layer daisyui.component {
      pointer-events: none;
      visibility: hidden;
      position: fixed;
      inset: calc(0.25rem * 0);
      margin: calc(0.25rem * 0);
      display: grid;
      height: 100%;
      max-height: none;
      width: 100%;
      max-width: none;
      align-items: center;
      justify-items: center;
      background-color: transparent;
      padding: calc(0.25rem * 0);
      color: inherit;
      transition: visibility 0.3s allow-discrete, background-color 0.3s ease-out, opacity 0.1s ease-out;
      overflow: clip;
      overscroll-behavior: contain;
      z-index: 999;
      scrollbar-gutter: auto;
      &::backdrop {
        display: none;
      }
    }
    @layer daisyui.modifier {
      &.modal-open, &[open], &:target, .modal-toggle:checked + & {
        pointer-events: auto;
        visibility: visible;
        opacity: 100%;
        transition: visibility 0s allow-discrete, background-color 0.3s ease-out, opacity 0.1s ease-out;
        background-color: oklch(0% 0 0/ 0.4);
        .modal-box {
          translate: 0 0;
          scale: 1;
          opacity: 1;
        }
      }
      @starting-style {
        &.modal-open, &[open], &:target, .modal-toggle:checked + & {
          opacity: 0%;
        }
      }
    }
  }
  .btn {
    :where(&) {
      @layer daisyui.component {
        width: unset;
      }
    }
    .prose & {
      text-decoration-line: none;
    }
    @layer daisyui.component {
      display: inline-flex;
      flex-shrink: 0;
      cursor: pointer;
      flex-wrap: nowrap;
      align-items: center;
      justify-content: center;
      gap: calc(0.25rem * 1.5);
      text-align: center;
      vertical-align: middle;
      outline-offset: 2px;
      webkit-user-select: none;
      user-select: none;
      padding-inline: var(--btn-p);
      color: var(--btn-fg);
      --tw-prose-links: var(--btn-fg);
      height: var(--size);
      font-size: var(--fontsize, 0.875rem);
      font-weight: 600;
      outline-color: var(--btn-color, var(--color-base-content));
      transition-property: color, background-color, border-color, box-shadow;
      transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
      transition-duration: 0.2s;
      border-start-start-radius: var(--join-ss, var(--radius-field));
      border-start-end-radius: var(--join-se, var(--radius-field));
      border-end-start-radius: var(--join-es, var(--radius-field));
      border-end-end-radius: var(--join-ee, var(--radius-field));
      background-color: var(--btn-bg);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--btn-noise);
      border-width: var(--border);
      border-style: solid;
      border-color: var(--btn-border);
      text-shadow: 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 0.15));
      touch-action: manipulation;
      box-shadow: 0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 6%)) inset, var(--btn-shadow);
      --size: calc(var(--size-field, 0.25rem) * 10);
      --btn-bg: var(--btn-color, var(--color-base-200));
      --btn-fg: var(--color-base-content);
      --btn-p: 1rem;
      --btn-border: var(--btn-bg);
      @supports (color: color-mix(in lab, red, red)) {
        --btn-border: color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%));
      }
      --btn-shadow: 0 3px 2px -2px var(--btn-bg),
      0 4px 3px -2px var(--btn-bg);
      @supports (color: color-mix(in lab, red, red)) {
        --btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000),
      0 4px 3px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000);
      }
      --btn-noise: var(--fx-noise);
      @media (hover: hover) {
        &:hover {
          --btn-bg: var(--btn-color, var(--color-base-200));
          @supports (color: color-mix(in lab, red, red)) {
            --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
          }
        }
      }
      &:focus-visible, &:has(:focus-visible) {
        outline-width: 2px;
        outline-style: solid;
        isolation: isolate;
      }
      &:active:not(.btn-active) {
        translate: 0 0.5px;
        --btn-bg: var(--btn-color, var(--color-base-200));
        @supports (color: color-mix(in lab, red, red)) {
          --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 5%);
        }
        --btn-border: var(--btn-color, var(--color-base-200));
        @supports (color: color-mix(in lab, red, red)) {
          --btn-border: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
        }
        --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
      }
      &:is(input[type="checkbox"], input[type="radio"]) {
        appearance: none;
        &::after {
          content: attr(aria-label);
        }
      }
      &:where(input:checked:not(.filter .btn)) {
        --btn-color: var(--color-primary);
        --btn-fg: var(--color-primary-content);
        isolation: isolate;
      }
    }
    &:disabled {
      @layer daisyui.modifier {
        &:not(.btn-link, .btn-ghost) {
          background-color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
          }
          box-shadow: none;
        }
        pointer-events: none;
        --btn-border: #0000;
        --btn-noise: none;
        --btn-fg: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
        }
        @media (hover: hover) {
          &:hover {
            pointer-events: none;
            background-color: var(--color-neutral);
            @supports (color: color-mix(in lab, red, red)) {
              background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
            }
            --btn-border: #0000;
            --btn-fg: var(--color-base-content);
            @supports (color: color-mix(in lab, red, red)) {
              --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
            }
          }
        }
      }
    }
    &[disabled] {
      @layer daisyui.modifier {
        &:not(.btn-link, .btn-ghost) {
          background-color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
          }
          box-shadow: none;
        }
        pointer-events: none;
        --btn-border: #0000;
        --btn-noise: none;
        --btn-fg: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
        }
        @media (hover: hover) {
          &:hover {
            pointer-events: none;
            background-color: var(--color-neutral);
            @supports (color: color-mix(in lab, red, red)) {
              background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
            }
            --btn-border: #0000;
            --btn-fg: var(--color-base-content);
            @supports (color: color-mix(in lab, red, red)) {
              --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
            }
          }
        }
      }
    }
  }
  .list {
    @layer daisyui.component {
      display: flex;
      flex-direction: column;
      font-size: 0.875rem;
      .list-row {
        --list-grid-cols: minmax(0, auto) 1fr;
        position: relative;
        display: grid;
        grid-auto-flow: column;
        gap: calc(0.25rem * 4);
        border-radius: var(--radius-box);
        padding: calc(0.25rem * 4);
        word-break: break-word;
        grid-template-columns: var(--list-grid-cols);
      }
      & > :not(:last-child) {
        &.list-row, .list-row {
          &:after {
            content: "";
            border-bottom: var(--border) solid;
            inset-inline: var(--radius-box);
            position: absolute;
            bottom: calc(0.25rem * 0);
            border-color: var(--color-base-content);
            @supports (color: color-mix(in lab, red, red)) {
              border-color: color-mix(in oklab, var(--color-base-content) 5%, transparent);
            }
          }
        }
      }
    }
    @layer daisyui.modifier {
      .list-row {
        &:has(.list-col-grow:nth-child(1)) {
          --list-grid-cols: 1fr;
        }
        &:has(.list-col-grow:nth-child(2)) {
          --list-grid-cols: minmax(0, auto) 1fr;
        }
        &:has(.list-col-grow:nth-child(3)) {
          --list-grid-cols: minmax(0, auto) minmax(0, auto) 1fr;
        }
        &:has(.list-col-grow:nth-child(4)) {
          --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
        }
        &:has(.list-col-grow:nth-child(5)) {
          --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
        }
        &:has(.list-col-grow:nth-child(6)) {
          --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto)
          minmax(0, auto) 1fr;
        }
        :not(.list-col-wrap) {
          grid-row-start: 1;
        }
      }
    }
  }
  .select {
    @layer daisyui.component {
      border: var(--border) solid #0000;
      position: relative;
      display: inline-flex;
      flex-shrink: 1;
      appearance: none;
      align-items: center;
      gap: calc(0.25rem * 1.5);
      background-color: var(--color-base-100);
      padding-inline-start: calc(0.25rem * 3);
      padding-inline-end: calc(0.25rem * 7);
      vertical-align: middle;
      width: clamp(3rem, 20rem, 100%);
      height: var(--size);
      font-size: 0.875rem;
      touch-action: manipulation;
      border-start-start-radius: var(--join-ss, var(--radius-field));
      border-start-end-radius: var(--join-se, var(--radius-field));
      border-end-start-radius: var(--join-es, var(--radius-field));
      border-end-end-radius: var(--join-ee, var(--radius-field));
      background-image: linear-gradient(45deg, #0000 50%, currentColor 50%), linear-gradient(135deg, currentColor 50%, #0000 50%);
      background-position: calc(100% - 20px) calc(1px + 50%), calc(100% - 16.1px) calc(1px + 50%);
      background-size: 4px 4px, 4px 4px;
      background-repeat: no-repeat;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      }
      border-color: var(--input-color);
      --input-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
      --size: calc(var(--size-field, 0.25rem) * 10);
      [dir="rtl"] & {
        background-position: calc(0% + 12px) calc(1px + 50%), calc(0% + 16px) calc(1px + 50%);
        &::picker(select), select::picker(select) {
          translate: 0.5rem 0;
        }
      }
      &[multiple] {
        height: auto;
        overflow: auto;
        padding-block: calc(0.25rem * 3);
        padding-inline-end: calc(0.25rem * 3);
        background-image: none;
      }
      select {
        margin-inline-start: calc(0.25rem * -3);
        margin-inline-end: calc(0.25rem * -7);
        width: calc(100% + 2.75rem);
        appearance: none;
        padding-inline-start: calc(0.25rem * 3);
        padding-inline-end: calc(0.25rem * 7);
        height: calc(100% - calc(var(--border) * 2));
        align-items: center;
        background: inherit;
        border-radius: inherit;
        border-style: none;
        &:focus, &:focus-within {
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
        &:not(:last-child) {
          margin-inline-end: calc(0.25rem * -5.5);
          background-image: none;
        }
      }
      &:focus, &:focus-within {
        --input-color: var(--color-base-content);
        box-shadow: 0 1px var(--input-color);
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
        }
        outline: 2px solid var(--input-color);
        outline-offset: 2px;
        isolation: isolate;
        z-index: 1;
      }
      &:has(> select[disabled]), &:is(:disabled, [disabled]), fieldset:disabled & {
        cursor: not-allowed;
        border-color: var(--color-base-200);
        background-color: var(--color-base-200);
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
        }
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
          }
        }
      }
      &:has(> select[disabled]) > select[disabled] {
        cursor: not-allowed;
      }
      &, & select {
        @supports (appearance: base-select) {
          appearance: base-select;
        }
        @supports (appearance: base-select) {
          &::picker(select) {
            appearance: base-select;
          }
        }
        &::picker(select) {
          color: inherit;
          max-height: min(24rem, 70dvh);
          margin-inline: 0.5rem;
          translate: -0.5rem 0;
          border: var(--border) solid var(--color-base-200);
          margin-block: calc(0.25rem * 2);
          border-radius: var(--radius-box);
          padding: calc(0.25rem * 2);
          background-color: inherit;
          box-shadow: 0 2px calc(var(--depth) * 3px) -2px oklch(0% 0 0/0.2);
          box-shadow: 0 20px 25px -5px rgb(0 0 0 / calc(var(--depth) * 0.1)), 0 8px 10px -6px rgb(0 0 0 / calc(var(--depth) * 0.1));
        }
        &::picker-icon {
          display: none;
        }
        optgroup {
          padding-top: 0.5em;
          option {
            &:nth-child(1) {
              margin-top: 0.5em;
            }
          }
        }
        option {
          border-radius: var(--radius-field);
          padding-inline: calc(0.25rem * 3);
          padding-block: calc(0.25rem * 1.5);
          transition-property: color, background-color;
          transition-duration: 0.2s;
          transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
          white-space: normal;
          &:not(:disabled) {
            &:hover, &:focus-visible {
              cursor: pointer;
              background-color: var(--color-base-content);
              @supports (color: color-mix(in lab, red, red)) {
                background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
              }
              --tw-outline-style: none;
              outline-style: none;
              @media (forced-colors: active) {
                outline: 2px solid transparent;
                outline-offset: 2px;
              }
            }
            &:active {
              background-color: var(--color-neutral);
              color: var(--color-neutral-content);
              box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--color-neutral);
            }
          }
        }
      }
    }
  }
  .swap {
    @layer daisyui.component {
      position: relative;
      display: inline-grid;
      cursor: pointer;
      place-content: center;
      vertical-align: middle;
      webkit-user-select: none;
      user-select: none;
      input {
        appearance: none;
        border: none;
      }
      > * {
        grid-column-start: 1;
        grid-row-start: 1;
        @media (prefers-reduced-motion: no-preference) {
          transition-property: transform, rotate, opacity;
          transition-duration: 0.2s;
          transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
        }
      }
      .swap-on, .swap-indeterminate, input:indeterminate ~ .swap-on {
        opacity: 0%;
      }
      input:is(:checked, :indeterminate) {
        & ~ .swap-off {
          opacity: 0%;
        }
      }
      input:checked ~ .swap-on, input:indeterminate ~ .swap-indeterminate {
        opacity: 100%;
        backface-visibility: visible;
      }
    }
  }
  .mockup-code {
    @layer daisyui.component {
      position: relative;
      overflow: hidden;
      overflow-x: auto;
      border-radius: var(--radius-box);
      background-color: var(--color-neutral);
      padding-block: calc(0.25rem * 5);
      color: var(--color-neutral-content);
      font-size: 0.875rem;
      direction: ltr;
      &:before {
        content: "";
        margin-bottom: calc(0.25rem * 4);
        display: block;
        height: calc(0.25rem * 3);
        width: calc(0.25rem * 3);
        border-radius: calc(infinity * 1px);
        opacity: 30%;
        box-shadow: 1.4em 0, 2.8em 0, 4.2em 0;
      }
      pre {
        padding-right: calc(0.25rem * 5);
        &:before {
          content: "";
          margin-right: 2ch;
        }
        &[data-prefix] {
          &:before {
            content: attr(data-prefix);
            display: inline-block;
            width: calc(0.25rem * 8);
            text-align: right;
            opacity: 50%;
          }
        }
      }
    }
  }
  .checkbox {
    @layer daisyui.component {
      border: var(--border) solid var(--input-color, var(--color-base-content));
      @supports (color: color-mix(in lab, red, red)) {
        border: var(--border) solid var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
      }
      position: relative;
      display: inline-block;
      flex-shrink: 0;
      cursor: pointer;
      appearance: none;
      border-radius: var(--radius-selector);
      padding: calc(0.25rem * 1);
      vertical-align: middle;
      color: var(--color-base-content);
      box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000;
      transition: background-color 0.2s, box-shadow 0.2s;
      --size: calc(var(--size-selector, 0.25rem) * 6);
      width: var(--size);
      height: var(--size);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
      &:before {
        --tw-content: "";
        content: var(--tw-content);
        display: block;
        width: 100%;
        height: 100%;
        rotate: 45deg;
        background-color: currentcolor;
        opacity: 0%;
        transition: clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s;
        transition-delay: 0.1s;
        clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
        box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
        font-size: 1rem;
        line-height: 0.75;
      }
      &:focus-visible {
        outline: 2px solid var(--input-color, currentColor);
        outline-offset: 2px;
      }
      &:checked, &[aria-checked="true"] {
        background-color: var(--input-color, #0000);
        box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
        &:before {
          clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
          opacity: 100%;
        }
        @media (forced-colors: active) {
          &:before {
            rotate: 0deg;
            background-color: transparent;
            --tw-content: "✔︎";
            clip-path: none;
          }
        }
        @media print {
          &:before {
            rotate: 0deg;
            background-color: transparent;
            --tw-content: "✔︎";
            clip-path: none;
          }
        }
      }
      &:indeterminate {
        background-color: var( --input-color, var(--color-base-content) );
        @supports (color: color-mix(in lab, red, red)) {
          background-color: var( --input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000) );
        }
        &:before {
          rotate: 0deg;
          opacity: 100%;
          translate: 0 -35%;
          clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
        }
      }
    }
    &:disabled {
      @layer daisyui.modifier {
        cursor: not-allowed;
        opacity: 20%;
      }
    }
  }
  .radio {
    @layer daisyui.component {
      position: relative;
      display: inline-block;
      flex-shrink: 0;
      cursor: pointer;
      appearance: none;
      border-radius: calc(infinity * 1px);
      padding: calc(0.25rem * 1);
      vertical-align: middle;
      border: var(--border) solid var(--input-color, currentColor);
      @supports (color: color-mix(in lab, red, red)) {
        border: var(--border) solid var(--input-color, color-mix(in srgb, currentColor 20%, #0000));
      }
      box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset;
      --size: calc(var(--size-selector, 0.25rem) * 6);
      width: var(--size);
      height: var(--size);
      color: var(--input-color, currentColor);
      &:before {
        display: block;
        width: 100%;
        height: 100%;
        border-radius: calc(infinity * 1px);
        --tw-content: "";
        content: var(--tw-content);
        background-size: auto, calc(var(--noise) * 100%);
        background-image: none, var(--fx-noise);
      }
      &:focus-visible {
        outline: 2px solid currentColor;
      }
      &:checked, &[aria-checked="true"] {
        border-color: currentcolor;
        background-color: var(--color-base-100);
        @media (prefers-reduced-motion: no-preference) {
          animation: radio 0.2s ease-out;
        }
        &:before {
          background-color: currentcolor;
          box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
        }
        @media (forced-colors: active) {
          &:before {
            outline-style: var(--tw-outline-style);
            outline-width: 1px;
            outline-offset: calc(1px * -1);
          }
        }
        @media print {
          &:before {
            outline: 0.25rem solid;
            outline-offset: -1rem;
          }
        }
      }
    }
    &:disabled {
      @layer daisyui.modifier {
        cursor: not-allowed;
        opacity: 20%;
      }
    }
  }
  .card {
    @layer daisyui.component {
      position: relative;
      display: flex;
      flex-direction: column;
      border-radius: var(--radius-box);
      outline-width: 2px;
      transition: outline 0.2s ease-in-out;
      outline: 0 solid #0000;
      outline-offset: 2px;
      &:focus {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
      }
      &:focus-visible {
        outline-color: currentColor;
      }
      :where(figure:first-child) {
        overflow: hidden;
        border-start-start-radius: inherit;
        border-start-end-radius: inherit;
        border-end-start-radius: unset;
        border-end-end-radius: unset;
      }
      :where(figure:last-child) {
        overflow: hidden;
        border-start-start-radius: unset;
        border-start-end-radius: unset;
        border-end-start-radius: inherit;
        border-end-end-radius: inherit;
      }
      figure {
        display: flex;
        align-items: center;
        justify-content: center;
      }
      &:has(> input:is(input[type="checkbox"], input[type="radio"])) {
        cursor: pointer;
        user-select: none;
      }
      &:has(> :checked) {
        outline: 2px solid currentColor;
      }
    }
  }
  .progress {
    @layer daisyui.component {
      position: relative;
      height: calc(0.25rem * 2);
      width: 100%;
      appearance: none;
      overflow: hidden;
      border-radius: var(--radius-box);
      background-color: currentcolor;
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, currentcolor 20%, transparent);
      }
      color: var(--color-base-content);
      &:indeterminate {
        background-image: repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% );
        background-size: 200%;
        background-position-x: 15%;
        @media (prefers-reduced-motion: no-preference) {
          animation: progress 5s ease-in-out infinite;
        }
        @supports (-moz-appearance: none) {
          &::-moz-progress-bar {
            background-color: transparent;
            @media (prefers-reduced-motion: no-preference) {
              animation: progress 5s ease-in-out infinite;
              background-image: repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% );
              background-size: 200%;
              background-position-x: 15%;
            }
          }
        }
      }
      @supports (-moz-appearance: none) {
        &::-moz-progress-bar {
          border-radius: var(--radius-box);
          background-color: currentcolor;
        }
      }
      @supports (-webkit-appearance: none) {
        &::-webkit-progress-bar {
          border-radius: var(--radius-box);
          background-color: transparent;
        }
        &::-webkit-progress-value {
          border-radius: var(--radius-box);
          background-color: currentColor;
        }
      }
    }
  }
  .fixed {
    position: fixed;
  }
  .top-12 {
    top: calc(var(--spacing) * 12);
  }
  .left-0 {
    left: calc(var(--spacing) * 0);
  }
  .divider {
    @layer daisyui.component {
      display: flex;
      height: calc(0.25rem * 4);
      flex-direction: row;
      align-items: center;
      align-self: stretch;
      white-space: nowrap;
      margin: var(--divider-m, 1rem 0);
      --divider-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --divider-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
      &:before, &:after {
        content: "";
        height: calc(0.25rem * 0.5);
        width: 100%;
        flex-grow: 1;
        background-color: var(--divider-color);
      }
      @media print {
        &:before, &:after {
          border: 0.5px solid;
        }
      }
      &:not(:empty) {
        gap: calc(0.25rem * 4);
      }
    }
  }
  .m-975 {
    margin: calc(var(--spacing) * 975);
  }
  .m-4434 {
    margin: calc(var(--spacing) * 4434);
  }
  .mx-auto {
    margin-inline: auto;
  }
  .my-4 {
    margin-block: calc(var(--spacing) * 4);
  }
  .mt-1 {
    margin-top: calc(var(--spacing) * 1);
  }
  .mt-2 {
    margin-top: calc(var(--spacing) * 2);
  }
  .mt-3 {
    margin-top: calc(var(--spacing) * 3);
  }
  .mt-4 {
    margin-top: calc(var(--spacing) * 4);
  }
  .mt-6 {
    margin-top: calc(var(--spacing) * 6);
  }
  .mr-6 {
    margin-right: calc(var(--spacing) * 6);
  }
  .mb-1 {
    margin-bottom: calc(var(--spacing) * 1);
  }
  .mb-2 {
    margin-bottom: calc(var(--spacing) * 2);
  }
  .mb-3 {
    margin-bottom: calc(var(--spacing) * 3);
  }
  .mb-4 {
    margin-bottom: calc(var(--spacing) * 4);
  }
  .mb-6 {
    margin-bottom: calc(var(--spacing) * 6);
  }
  .mb-8 {
    margin-bottom: calc(var(--spacing) * 8);
  }
  .mb-12 {
    margin-bottom: calc(var(--spacing) * 12);
  }
  .ml-4 {
    margin-left: calc(var(--spacing) * 4);
  }
  .status {
    @layer daisyui.component {
      display: inline-block;
      aspect-ratio: 1 / 1;
      width: calc(0.25rem * 2);
      height: calc(0.25rem * 2);
      border-radius: var(--radius-selector);
      background-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
      }
      background-position: center;
      background-repeat: no-repeat;
      vertical-align: middle;
      color: color-mix(in srgb, #000 30%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-black) 30%, transparent);
      }
      background-image: radial-gradient( circle at 35% 30%, oklch(1 0 0 / calc(var(--depth) * 0.5)), #0000 );
      box-shadow: 0 2px 3px -1px currentColor;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 2px 3px -1px color-mix(in oklab, currentColor calc(var(--depth) * 100%), #0000);
      }
    }
  }
  .card-body {
    @layer daisyui.component {
      display: flex;
      flex: auto;
      flex-direction: column;
      gap: calc(0.25rem * 2);
      padding: var(--card-p, 1.5rem);
      font-size: var(--card-fs, 0.875rem);
      :where(p) {
        flex-grow: 1;
      }
    }
  }
  .card-title {
    @layer daisyui.component {
      display: flex;
      align-items: center;
      gap: calc(0.25rem * 2);
      font-size: var(--cardtitle-fs, 1.125rem);
      font-weight: 600;
    }
  }
  .block {
    display: block;
  }
  .flex {
    display: flex;
  }
  .grid {
    display: grid;
  }
  .hidden {
    display: none;
  }
  .inline-block {
    display: inline-block;
  }
  .h-\[calc\(100vh-48px\)\] {
    height: calc(100vh - 48px);
  }
  .w-64 {
    width: calc(var(--spacing) * 64);
  }
  .w-full {
    width: 100%;
  }
  .max-w-4xl {
    max-width: var(--container-4xl);
  }
  .max-w-md {
    max-width: var(--container-md);
  }
  .flex-1 {
    flex: 1;
  }
  .transform {
    transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
  }
  .link {
    @layer daisyui.component {
      cursor: pointer;
      text-decoration-line: underline;
      &:focus {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
      }
      &:focus-visible {
        outline: 2px solid currentColor;
        outline-offset: 2px;
      }
    }
  }
  .resize {
    resize: both;
  }
  .list-inside {
    list-style-position: inside;
  }
  .list-decimal {
    list-style-type: decimal;
  }
  .grid-cols-1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));
  }
  .items-stretch {
    align-items: stretch;
  }
  .justify-center {
    justify-content: center;
  }
  .gap-0 {
    gap: calc(var(--spacing) * 0);
  }
  .gap-3 {
    gap: calc(var(--spacing) * 3);
  }
  .space-y-2 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 2) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-y-4 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 4) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 4) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .space-y-8 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 8) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 8) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .overflow-y-auto {
    overflow-y: auto;
  }
  .rounded {
    border-radius: 0.25rem;
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-lg {
    border-radius: var(--radius-lg);
  }
  .border {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }
  .border-r {
    border-right-style: var(--tw-border-style);
    border-right-width: 1px;
  }
  .border-base-300 {
    border-color: var(--color-base-300);
  }
  .border-gray-600 {
    border-color: var(--color-gray-600);
  }
  .border-gray-700 {
    border-color: var(--color-gray-700);
  }
  .bg-accent {
    background-color: var(--color-accent);
  }
  .bg-base-100 {
    background-color: var(--color-base-100);
  }
  .bg-base-200 {
    background-color: var(--color-base-200);
  }
  .bg-base-300 {
    background-color: var(--color-base-300);
  }
  .bg-black {
    background-color: var(--color-black);
  }
  .bg-gray-900 {
    background-color: var(--color-gray-900);
  }
  .bg-white {
    background-color: var(--color-white);
  }
  .p-3 {
    padding: calc(var(--spacing) * 3);
  }
  .p-4 {
    padding: calc(var(--spacing) * 4);
  }
  .p-8 {
    padding: calc(var(--spacing) * 8);
  }
  .px-1 {
    padding-inline: calc(var(--spacing) * 1);
  }
  .px-3 {
    padding-inline: calc(var(--spacing) * 3);
  }
  .px-4 {
    padding-inline: calc(var(--spacing) * 4);
  }
  .py-2 {
    padding-block: calc(var(--spacing) * 2);
  }
  .pt-8 {
    padding-top: calc(var(--spacing) * 8);
  }
  .pt-16 {
    padding-top: calc(var(--spacing) * 16);
  }
  .text-center {
    text-align: center;
  }
  .text-2xl {
    font-size: var(--text-2xl);
    line-height: var(--tw-leading, var(--text-2xl--line-height));
  }
  .text-3xl {
    font-size: var(--text-3xl);
    line-height: var(--tw-leading, var(--text-3xl--line-height));
  }
  .text-4xl {
    font-size: var(--text-4xl);
    line-height: var(--tw-leading, var(--text-4xl--line-height));
  }
  .text-6xl {
    font-size: var(--text-6xl);
    line-height: var(--tw-leading, var(--text-6xl--line-height));
  }
  .text-lg {
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
  }
  .text-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .text-xl {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
  }
  .text-xs {
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
  }
  .font-bold {
    --tw-font-weight: var(--font-weight-bold);
    font-weight: var(--font-weight-bold);
  }
  .font-medium {
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
  }
  .font-semibold {
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
  }
  .text-accent-content {
    color: var(--color-accent-content);
  }
  .text-base-content {
    color: var(--color-base-content);
  }
  .text-base-content\/70 {
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 70%, transparent);
    }
  }
  .text-base-content\/80 {
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
    }
  }
  .text-black {
    color: var(--color-black);
  }
  .text-gray-400 {
    color: var(--color-gray-400);
  }
  .text-red-500 {
    color: var(--color-red-500);
  }
  .text-white {
    color: var(--color-white);
  }
  .text-yellow-500 {
    color: var(--color-yellow-500);
  }
  .link-hover {
    @layer daisyui.modifier {
      text-decoration-line: none;
      &:hover {
        @media (hover: hover) {
          text-decoration-line: underline;
        }
      }
    }
  }
  .underline {
    text-decoration-line: underline;
  }
  .shadow-xl {
    --tw-shadow: 0 20px 25px -5px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 8px 10px -6px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .invert {
    --tw-invert: invert(100%);
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .transition {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter, display, content-visibility, overlay, pointer-events;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .transition-colors {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .btn-secondary {
    @layer daisyui.modifier.color {
      --btn-color: var(--color-secondary);
      --btn-fg: var(--color-secondary-content);
    }
  }
  .hover\:bg-base-300 {
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-base-300);
      }
    }
  }
  .hover\:bg-gray-200 {
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-gray-200);
      }
    }
  }
  .hover\:text-gray-300 {
    &:hover {
      @media (hover: hover) {
        color: var(--color-gray-300);
      }
    }
  }
  .focus\:border-white {
    &:focus {
      border-color: var(--color-white);
    }
  }
  .focus\:outline-none {
    &:focus {
      --tw-outline-style: none;
      outline-style: none;
    }
  }
  .disabled\:opacity-50 {
    &:disabled {
      opacity: 50%;
    }
  }
  .md\:grid-cols-2 {
    @media (width >= 48rem) {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
}
@layer base {
  :where(:root),:root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: oklch(45% 0.24 277.023);
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  @media (prefers-color-scheme: dark) {
    :root:not([data-theme]) {
      color-scheme: dark;
      --color-base-100: oklch(25.33% 0.016 252.42);
      --color-base-200: oklch(23.26% 0.014 253.1);
      --color-base-300: oklch(21.15% 0.012 254.09);
      --color-base-content: oklch(97.807% 0.029 256.847);
      --color-primary: oklch(58% 0.233 277.117);
      --color-primary-content: oklch(96% 0.018 272.314);
      --color-secondary: oklch(65% 0.241 354.308);
      --color-secondary-content: oklch(94% 0.028 342.258);
      --color-accent: oklch(77% 0.152 181.912);
      --color-accent-content: oklch(38% 0.063 188.416);
      --color-neutral: oklch(14% 0.005 285.823);
      --color-neutral-content: oklch(92% 0.004 286.32);
      --color-info: oklch(74% 0.16 232.661);
      --color-info-content: oklch(29% 0.066 243.157);
      --color-success: oklch(76% 0.177 163.223);
      --color-success-content: oklch(37% 0.077 168.94);
      --color-warning: oklch(82% 0.189 84.429);
      --color-warning-content: oklch(41% 0.112 45.904);
      --color-error: oklch(71% 0.194 13.428);
      --color-error-content: oklch(27% 0.105 12.094);
      --radius-selector: 0.5rem;
      --radius-field: 0.25rem;
      --radius-box: 0.5rem;
      --size-selector: 0.25rem;
      --size-field: 0.25rem;
      --border: 1px;
      --depth: 1;
      --noise: 0;
    }
  }
}
@layer base {
  :root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: oklch(45% 0.24 277.023);
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=dark]:checked),[data-theme=dark] {
    color-scheme: dark;
    --color-base-100: oklch(25.33% 0.016 252.42);
    --color-base-200: oklch(23.26% 0.014 253.1);
    --color-base-300: oklch(21.15% 0.012 254.09);
    --color-base-content: oklch(97.807% 0.029 256.847);
    --color-primary: oklch(58% 0.233 277.117);
    --color-primary-content: oklch(96% 0.018 272.314);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root {
    --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 200'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='200' height='200' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }
}
@layer base {
  :root {
    scrollbar-color: currentColor #0000;
    @supports (color: color-mix(in lab, red, red)) {
      scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) #0000;
    }
  }
}
@layer base {
  @property --radialprogress {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }
}
@layer base {
  :root:has(.modal-open, .modal[open], .modal:target, .modal-toggle:checked) {
    overflow: hidden;
    --page-has-backdrop: 1;
  }
  :root:has(.drawer:not([class*="drawer-open"]) > .drawer-toggle:checked) {
    overflow: hidden;
    --page-has-backdrop: 1;
  }
  :root:has(.sm\:drawer-open > .drawer-toggle:checked) {
    @media (width < 40rem) {
      overflow: hidden;
    }
    @media (width < 40rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.md\:drawer-open > .drawer-toggle:checked) {
    @media (width < 48rem) {
      overflow: hidden;
    }
    @media (width < 48rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.lg\:drawer-open > .drawer-toggle:checked) {
    @media (width < 64rem) {
      overflow: hidden;
    }
    @media (width < 64rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.xl\:drawer-open > .drawer-toggle:checked) {
    @media (width < 80rem) {
      overflow: hidden;
    }
    @media (width < 80rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.\32xl\:drawer-open > .drawer-toggle:checked) {
    @media (width < 96rem) {
      overflow: hidden;
    }
    @media (width < 96rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.max-sm\:drawer-open > .drawer-toggle:checked) {
    @media (width >= 40rem) {
      overflow: hidden;
    }
    @media (width >= 40rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.max-md\:drawer-open > .drawer-toggle:checked) {
    @media (width >= 48rem) {
      overflow: hidden;
    }
    @media (width >= 48rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.max-lg\:drawer-open > .drawer-toggle:checked) {
    @media (width >= 64rem) {
      overflow: hidden;
    }
    @media (width >= 64rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.max-xl\:drawer-open > .drawer-toggle:checked) {
    @media (width >= 80rem) {
      overflow: hidden;
    }
    @media (width >= 80rem) {
      --page-has-backdrop: 1;
    }
  }
  :root:has(.max-2xl\:drawer-open > .drawer-toggle:checked) {
    @media (width >= 96rem) {
      overflow: hidden;
    }
    @media (width >= 96rem) {
      --page-has-backdrop: 1;
    }
  }
}
@layer base {
  :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked ) {
    background-image: linear-gradient(var(--root-bg), var(--root-bg));
    background-color: var(--root-bg);
    @supports (color: color-mix(in lab, red, red)) {
      background-color: color-mix( in srgb, var(--root-bg), oklch(0% 0 0) calc(var(--page-has-backdrop, 0) * 40%) );
    }
    animation: set-page-has-scroll forwards;
    animation-timeline: scroll();
    scrollbar-gutter: stable;
    scrollbar-gutter: if(style(--page-has-scroll: 1): stable; else: unset);
  }
  @keyframes set-page-has-scroll {
    0%, to {
      --page-has-scroll: 1;
    }
  }
}
@layer base {
  :root, [data-theme] {
    background-color: var(--root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }
  :where(:root, [data-theme]) {
    --root-bg: var(--color-base-100);
  }
}
@keyframes rating {
  0%, 40% {
    scale: 1.1;
    filter: brightness(1.05) contrast(1.05);
  }
}
@keyframes dropdown {
  0% {
    opacity: 0;
  }
}
@keyframes radio {
  0% {
    padding: 5px;
  }
  50% {
    padding: 3px;
  }
}
@keyframes toast {
  0% {
    scale: 0.9;
    opacity: 0;
  }
  100% {
    scale: 1;
    opacity: 1;
  }
}
@keyframes skeleton {
  0% {
    background-position: 150%;
  }
  100% {
    background-position: -50%;
  }
}
@keyframes progress {
  50% {
    background-position-x: -115%;
  }
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
}
@property --tw-space-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-font-weight {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-ring-inset {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0px;
}
@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}
@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-blur {
  syntax: "*";
  inherits: false;
}
@property --tw-brightness {
  syntax: "*";
  inherits: false;
}
@property --tw-contrast {
  syntax: "*";
  inherits: false;
}
@property --tw-grayscale {
  syntax: "*";
  inherits: false;
}
@property --tw-hue-rotate {
  syntax: "*";
  inherits: false;
}
@property --tw-invert {
  syntax: "*";
  inherits: false;
}
@property --tw-opacity {
  syntax: "*";
  inherits: false;
}
@property --tw-saturate {
  syntax: "*";
  inherits: false;
}
@property --tw-sepia {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-drop-shadow-size {
  syntax: "*";
  inherits: false;
}
@layer properties {
  @supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {
    *, ::before, ::after, ::backdrop {
      --tw-rotate-x: initial;
      --tw-rotate-y: initial;
      --tw-rotate-z: initial;
      --tw-skew-x: initial;
      --tw-skew-y: initial;
      --tw-space-y-reverse: 0;
      --tw-border-style: solid;
      --tw-font-weight: initial;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-blur: initial;
      --tw-brightness: initial;
      --tw-contrast: initial;
      --tw-grayscale: initial;
      --tw-hue-rotate: initial;
      --tw-invert: initial;
      --tw-opacity: initial;
      --tw-saturate: initial;
      --tw-sepia: initial;
      --tw-drop-shadow: initial;
      --tw-drop-shadow-color: initial;
      --tw-drop-shadow-alpha: 100%;
      --tw-drop-shadow-size: initial;
    }
  }
}
