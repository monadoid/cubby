name: Deploy to Production

on:
  push:
    branches:
      - main

env:
  RUST_TOOLCHAIN: stable
  TOOLCHAIN_PROFILE: minimal

jobs:
  detect-changes:
    name: Detect Changed Files
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.filter.outputs.rust }}
      cubby-api: ${{ steps.filter.outputs.cubby-api }}
      exampleco-website: ${{ steps.filter.outputs.exampleco-website }}
      cubby-installer: ${{ steps.filter.outputs.cubby-installer }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            rust:
              - 'cubby-core/**'
              - 'cubby-server/**'
              - 'cubby-audio/**'
              - 'cubby-vision/**'
              - 'cubby-db/**'
              - 'Cargo.toml'
              - 'Cargo.lock'
            cubby-api:
              - 'cubby-api/**'
            exampleco-website:
              - 'exampleco-website/**'
            cubby-installer:
              - 'cubby-installer/**'

  build-binaries:
    name: Build Release Binaries
    needs: detect-changes
    if: needs.detect-changes.outputs.rust == 'true'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: cubby-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: cubby-linux-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: cubby-darwin-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: cubby-darwin-aarch64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ffmpeg pkg-config

      - name: Install dependencies (Linux x86_64)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            ffmpeg \
            libavcodec-dev \
            libavformat-dev \
            libavutil-dev \
            libswscale-dev \
            libasound2-dev \
            libdbus-1-dev \
            libxcb1-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            libtesseract-dev \
            libssl-dev \
            cmake \
            build-essential

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build release binary (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cargo build --release --package cubby-server --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Build release binary (Others)
        if: matrix.target != 'aarch64-unknown-linux-gnu'
        run: cargo build --release --package cubby-server --target ${{ matrix.target }}

      - name: Rename binary
        run: |
          cp target/${{ matrix.target }}/release/cubby ${{ matrix.name }}

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}

  upload-to-r2:
    name: Upload Binaries to Cloudflare R2
    needs: [detect-changes, build-binaries]
    if: needs.detect-changes.outputs.rust == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries

      - name: List downloaded binaries
        run: |
          ls -lR binaries/

      - name: Install Rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash

      - name: Configure Rclone for R2
        run: |
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf << EOF
          [r2]
          type = s3
          provider = Cloudflare
          access_key_id = ${{ secrets.R2_ACCESS_KEY_ID }}
          secret_access_key = ${{ secrets.R2_SECRET_ACCESS_KEY }}
          endpoint = ${{ secrets.R2_ENDPOINT }}
          EOF

      - name: Upload binaries to R2
        run: |
          for dir in binaries/*; do
            if [ -d "$dir" ]; then
              binary_name=$(basename "$dir")
              rclone copy "$dir/$binary_name" r2:cubby-releases/latest/ --s3-no-check-bucket --verbose
            fi
          done

  migrate-database:
    name: Run Database Migrations
    needs: detect-changes
    if: needs.detect-changes.outputs.cubby-api == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Install dependencies
        working-directory: cubby-api
        run: pnpm install --frozen-lockfile

      - name: Run database migrations
        working-directory: cubby-api
        run: pnpm db:migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  deploy-cubby-api:
    needs: [detect-changes, migrate-database]
    if: ${{ !cancelled() && needs.detect-changes.outputs.cubby-api == 'true' && (needs.migrate-database.result == 'success' || needs.migrate-database.result == 'skipped') }}
    name: Deploy cubby-api
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Install dependencies
        working-directory: cubby-api
        run: pnpm install --frozen-lockfile

      - name: Deploy to Cloudflare Workers
        working-directory: cubby-api
        run: pnpm deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          STYTCH_PROJECT_ID: ${{ secrets.STYTCH_PROJECT_ID }}
          STYTCH_SECRET: ${{ secrets.STYTCH_SECRET }}
          MCP_AUTH_SECRET: ${{ secrets.MCP_AUTH_SECRET }}

  deploy-exampleco-website:
    needs: detect-changes
    if: needs.detect-changes.outputs.exampleco-website == 'true'
    name: Deploy exampleco-website
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Install dependencies
        working-directory: exampleco-website
        run: pnpm install --frozen-lockfile

      - name: Deploy to Cloudflare Workers
        working-directory: exampleco-website
        run: pnpm deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  deploy-cubby-installer:
    needs: [detect-changes, upload-to-r2]
    if: ${{ !cancelled() && needs.detect-changes.outputs.cubby-installer == 'true' && (needs.upload-to-r2.result == 'success' || needs.upload-to-r2.result == 'skipped') }}
    name: Deploy cubby-installer
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Install dependencies
        working-directory: cubby-installer
        run: pnpm install --frozen-lockfile

      - name: Deploy to Cloudflare Workers
        working-directory: cubby-installer
        run: pnpm deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

