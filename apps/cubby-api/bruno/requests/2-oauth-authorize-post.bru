meta {
  name: OAuth Authorize POST (approve)
  type: http
  seq: 11
}

post {
  url: {{base_url}}/oauth/authorize
  body: formUrlEncoded
}

headers {
  Content-Type: application/x-www-form-urlencoded
  Cookie: session_jwt={{session_jwt}}
}

body:form-urlencoded {
  client_id: {{client_id}}
  redirect_uri: {{redirect_uri}}
  response_type: code
  scope: {{scope}}
  state: {{state}}
  code_challenge: {{code_challenge}}
  code_challenge_method: S256
  approved: true
}

settings {
  followRedirects: false
}

assert {
  res.status: in [301, 302, 303]
}

script:post-response {
  console.log('Response status:', res.status);
  
  // Extract the authorization code from the Location header  
  const location = res.getHeader('location');
  if (location) {
    console.log('Redirect location:', location);
    try {
      const url = new URL(location);
      const code = url.searchParams.get('code');
      const state = url.searchParams.get('state');
      if (code) {
        bru.setEnvVar('authorization_code', code);
        console.log('✅ Authorization code extracted:', code.substring(0, 20) + '...');
        console.log('State parameter:', state);
      } else {
        console.log('❌ No code found in location:', location);
      }
    } catch (e) {
      console.log('❌ Failed to parse redirect URL:', e.message);
    }
  } else {
    console.log('❌ No location header found');
  }
}

docs {
  This simulates clicking "Authorize" on the consent page.
  The response will be a 302 redirect with the authorization code in the Location header.
  The post-response script extracts the code and saves it to the environment.
}