# # Run for macOS
# act -W .github/workflows/release-cli.yml --container-architecture linux/amd64 -j build-macos -P macos-latest=-self-hosted

# act -W .github/workflows/release-cli.yml --container-architecture linux/amd64 -j build-linux -P ubuntu-latest=catthehacker/ubuntu:act-latest --secret GITHUB_TOKEN=$(cat .env | grep GITHUB_TOKEN | tail -n 1 | cut -d '=' -f 2)

name: Release CLI

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  workflow_dispatch:
permissions:
  contents: write
jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      rust_changed: ${{ steps.filter.outputs.rust }}
      is_release: ${{ steps.check-release.outputs.is_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check if this is a release
        id: check-release
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Check for Rust changes
        if: github.ref == 'refs/heads/main'
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            rust:
              - 'cubby-core/**'
              - 'cubby-server/**'
              - 'cubby-audio/**'
              - 'cubby-vision/**'
              - 'cubby-db/**'
              - 'cubby-events/**'
              - 'Cargo.toml'
              - 'Cargo.lock'
#  build-macos:
#    runs-on: macos-latest
#    strategy:
#      matrix:
#        target: [x86_64-apple-darwin, aarch64-apple-darwin]
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up Rust
#        uses: actions-rust-lang/setup-rust-toolchain@v1
#        with:
#          toolchain: stable
#          override: true
#          cache: true
#          target: ${{ matrix.target }}
#          rustflags: ""
#
#      - name: Cache Homebrew packages
#        uses: actions/cache@v4
#        with:
#          path: |
#            ~/Library/Caches/Homebrew
#            /usr/local/Cellar/ffmpeg
#            /usr/local/Cellar/pkg-config
#          key: ${{ runner.os }}-brew-${{ hashFiles('.github/workflows/release-cli.yml') }}
#          restore-keys: |
#            ${{ runner.os }}-brew-
#
#      - name: Install dependencies
#        run: |
#          brew unlink pkg-config@0.29.2 || true
#          brew install ffmpeg pkg-config
#          brew link --overwrite pkg-config
#
#      - uses: actions/cache@v4
#        with:
#          path: |
#            ~/.cargo/bin/
#            ~/.cargo/registry/index/
#            ~/.cargo/registry/cache/
#            ~/.cargo/git/db/
#          key: ${{ matrix.platform }}-cargo-${{ hashFiles('**/Cargo.lock') }}
#
#      - name: Build (x86_64)
#        if: matrix.target == 'x86_64-apple-darwin'
#        run: |
#          export PKG_CONFIG_PATH="/usr/local/opt/ffmpeg/lib/pkgconfig:$PKG_CONFIG_PATH"
#          export RUSTFLAGS="-C link-arg=-Wl,-rpath,@executable_path/../lib -C link-arg=-Wl,-rpath,@loader_path/../lib"
#          cargo build --release --target ${{ matrix.target }}
#
#      - name: Build with Metal feature (arm64)
#        if: matrix.target == 'aarch64-apple-darwin'
#        env:
#          # Force ggml to avoid native auto-detect and i8mm
#          CMAKE_ARGS: >-
#            -DGGML_NATIVE=OFF
#            -DCMAKE_OSX_ARCHITECTURES=arm64
#            -DCMAKE_OSX_DEPLOYMENT_TARGET=14.0
#            -DCMAKE_C_FLAGS=-mcpu=apple-m1
#            -DCMAKE_CXX_FLAGS=-mcpu=apple-m1
#            -DGGML_MACHINE_SUPPORTS_i8mm=OFF
#          # Belt-and-suspenders: also pass via standard compiler envs
#          CFLAGS: -mcpu=apple-m1
#          CXXFLAGS: -mcpu=apple-m1
#        run: |
#          export PKG_CONFIG_PATH="/usr/local/opt/ffmpeg/lib/pkgconfig:$PKG_CONFIG_PATH"
#          export PKG_CONFIG_ALLOW_CROSS=1
#          export RUSTFLAGS="-C link-arg=-Wl,-rpath,@executable_path/../lib -C link-arg=-Wl,-rpath,@loader_path/../lib"
#          cargo build --release --features metal --target ${{ matrix.target }}
#
#      - name: Set version
#        run: |
#          if [[ $GITHUB_REF == refs/tags/* ]]; then
#            VERSION=${GITHUB_REF#refs/tags/v}
#          else
#            VERSION=$(git ls-remote --tags --refs --sort="version:refname" | tail -n1 | sed 's/.*\///' | sed 's/^v//')
#          fi
#          if [[ -z "$VERSION" ]]; then
#            VERSION="0.0.0"
#          fi
#          echo "VERSION=$VERSION" >> $GITHUB_ENV
#          echo "Set version to: $VERSION"
#
#      - name: Create deployment package
#        run: |
#          mkdir -p cubby-${{ env.VERSION }}-${{ matrix.target }}/bin
#          cp target/${{ matrix.target }}/release/cubby cubby-${{ env.VERSION }}-${{ matrix.target }}/bin/
#          tar -czf cubby-${{ env.VERSION }}-${{ matrix.target }}.tar.gz -C cubby-${{ env.VERSION }}-${{ matrix.target }} .
#
#      - name: Calculate SHA256
#        run: |
#          echo "MAC_SHA256_${{ matrix.target }}=$(shasum -a 256 cubby-*.tar.gz | cut -d ' ' -f 1)" >> $GITHUB_ENV
#
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: cubby-macos-${{ matrix.target }}
#          path: cubby-*.tar.gz

#  build-windows:
#    runs-on: windows-2019
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Install Rust
#        run: |
#          Invoke-WebRequest https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-gnu/rustup-init.exe -OutFile rustup-init.exe
#          .\rustup-init.exe -y
#
#      - name: Install 7zip
#        shell: powershell
#        run: |
#          $7zipUrl = "https://7-zip.org/a/7z2301-x64.exe"
#          $7zipInstaller = "7z-installer.exe"
#          Invoke-WebRequest -Uri $7zipUrl -OutFile $7zipInstaller
#          Start-Process -FilePath .\$7zipInstaller -Args "/S" -Wait
#          Remove-Item $7zipInstaller
#          # Add 7zip to PATH and make it persistent for subsequent steps
#          echo "C:\Program Files\7-Zip" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
#          # Verify installation
#          & "C:\Program Files\7-Zip\7z.exe" i
#
#      - name: Set up MSVC
#        uses: ilammy/msvc-dev-cmd@v1
#
#      - name: Install LLVM and Clang
#        uses: KyleMayes/install-llvm-action@v2
#        with:
#          version: "10.0"
#
#      - uses: actions/cache@v4
#        with:
#          path: |
#            ~/.cargo/registry/index/
#            ~/.cargo/registry/cache/
#            ~/.cargo/git/db/
#          key: windows-cargo-${{ hashFiles('**/Cargo.lock') }}
#
#      - name: Build CLI
#        env:
#          CARGO_PROFILE_RELEASE_STRIP: "symbols"
#          CARGO_PROFILE_RELEASE_PANIC: "abort"
#          CARGO_PROFILE_RELEASE_INCREMENTAL: "false"
#          RUSTFLAGS: "-C target-feature=+crt-static -C link-arg=/LTCG"
#        run: |
#          cargo build --release --target x86_64-pc-windows-msvc
#
#      - name: Set version
#        shell: pwsh
#        run: |
#          $VERSION = if ($env:GITHUB_REF -match "refs/tags/*") {
#              $env:GITHUB_REF -replace "refs/tags/v", ""
#          } else {
#              $tags = git ls-remote --tags --refs --sort="version:refname"
#              if ($tags) {
#                  $latestTag = ($tags -split "`n")[-1] -replace ".*/v", ""
#                  $latestTag
#              } else {
#                  "0.0.0"
#              }
#          }
#          if ([string]::IsNullOrEmpty($VERSION)) {
#              $VERSION = "0.0.0"
#          }
#          "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append
#          "Set version to: $VERSION"
#
#      - name: Create deployment package
#        shell: pwsh
#        run: |
#          $packageDir = "cubby-${{ env.VERSION }}-x86_64-pc-windows-msvc"
#          New-Item -Path "$packageDir/bin" -ItemType Directory -Force
#          Copy-Item "target/x86_64-pc-windows-msvc/release/cubby.exe" "$packageDir/bin/"
#          Copy-Item "target/x86_64-pc-windows-msvc/release/onnxruntime.dll" "$packageDir/bin/"
#          7z a "$packageDir.zip" "./$packageDir/*"
#
#      - name: Calculate SHA256
#        shell: pwsh
#        run: |
#          $hash = Get-FileHash "cubby-${{ env.VERSION }}-x86_64-pc-windows-msvc.zip" -Algorithm SHA256
#          "WIN_SHA256=$($hash.Hash)" | Out-File -FilePath $env:GITHUB_ENV -Append
#
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: cubby-windows
#          path: cubby-*.zip

  build-linux:
    runs-on: ubuntu-22.04
    needs: [detect-changes]
    # Always run on releases, workflow_dispatch, or if Rust changed
    if: |
      needs.detect-changes.outputs.is_release == 'true' ||
      github.event_name == 'workflow_dispatch' ||
      needs.detect-changes.outputs.rust_changed == 'true'
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            ffmpeg \
            libavcodec-dev \
            libavformat-dev \
            libavutil-dev \
            libswscale-dev \
            libasound2-dev \
            libdbus-1-dev \
            libxcb1-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            libtesseract-dev \
            libssl-dev \
            cmake \
            build-essential \
            libx11-dev \
            libxi-dev \
            libxext-dev \
            libxtst-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxdo-dev

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "14.0"

      - name: Set LIBCLANG_PATH
        run: |
          echo "LIBCLANG_PATH=$(llvm-config --prefix)/lib" >> $GITHUB_ENV

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build CLI
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Set version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(git ls-remote --tags --refs --sort="version:refname" | tail -n1 | sed 's/.*\///' | sed 's/^v//')
          fi
          if [[ -z "$VERSION" ]]; then
            VERSION="0.0.0"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Set version to: $VERSION"

      - name: Create deployment package
        run: |
          mkdir -p cubby-${{ env.VERSION }}-${{ matrix.target }}/bin
          cp target/${{ matrix.target }}/release/cubby cubby-${{ env.VERSION }}-${{ matrix.target }}/bin/
          tar -czf cubby-${{ env.VERSION }}-${{ matrix.target }}.tar.gz -C cubby-${{ env.VERSION }}-${{ matrix.target }} .

      - name: Calculate SHA256
        run: |
          echo "LINUX_SHA256_${{ matrix.target }}=$(sha256sum cubby-*.tar.gz | cut -d ' ' -f 1)" >> $GITHUB_ENV

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cubby-linux-${{ matrix.target }}
          path: cubby-*.tar.gz

  release:
    runs-on: ubuntu-latest
    needs: [build-linux]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(git ls-remote --tags --refs --sort="version:refname" | tail -n1 | sed 's/.*\///' | sed 's/^v//')
          fi
          if [[ -z "$VERSION" ]]; then
            VERSION="0.0.0"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Set version to: $VERSION"

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: ls -R artifacts

      - name: Create or update Release  
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          # Create release - will fail silently if it already exists (meaning macOS binaries were uploaded manually)
          gh release create v${{ env.VERSION }} --title ${{ env.VERSION }} --generate-notes || echo "Release already exists"

  upload-to-r2:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-linux]
    # Only upload to R2 on releases
    if: needs.detect-changes.outputs.is_release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(git ls-remote --tags --refs --sort="version:refname" | tail -n1 | sed 's/.*\///' | sed 's/^v//')
          fi
          if [[ -z "$VERSION" ]]; then
            VERSION="0.0.0"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Set version to: $VERSION"

      - name: Download Linux Artifacts from workflow
        uses: actions/download-artifact@v4
        with:
          path: artifacts
        continue-on-error: true

      - name: Download macOS binaries from GitHub Release
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          mkdir -p release-assets
          cd release-assets
          
          # Download macOS binaries from GitHub release
          echo "Downloading macOS binaries from v${{ env.VERSION }} release..."
          gh release download v${{ env.VERSION }} --pattern "cubby-${{ env.VERSION }}-*-apple-darwin.tar.gz" || echo "No macOS binaries found in release"
          
          ls -lh

      - name: List all downloaded files
        run: |
          echo "=== Linux artifacts ==="
          ls -R artifacts
          echo "=== macOS release assets ==="
          ls -R release-assets

      - name: Install Rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash

      - name: Configure Rclone for R2
        run: |
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf << 'EOF'
          [r2]
          type = s3
          provider = Cloudflare
          access_key_id = ${{ secrets.R2_ACCESS_KEY_ID }}
          secret_access_key = ${{ secrets.R2_SECRET_ACCESS_KEY }}
          endpoint = ${{ secrets.R2_ENDPOINT }}
          EOF

      - name: Extract and upload binaries to R2
        run: |
          shopt -s globstar nullglob
          mkdir -p binaries-extracted
          
          # Process all tar.gz files from both artifacts (Linux) and release-assets (macOS)
          for f in artifacts/**/cubby-*.tar.gz release-assets/cubby-*.tar.gz; do
            if [ -f "$f" ]; then
              echo "Processing $f"
              # Extract the tar.gz
              tar -xzf "$f" -C binaries-extracted
              
              # Determine the target from filename
              # cubby-0.1.3-x86_64-unknown-linux-gnu.tar.gz -> x86_64-unknown-linux-gnu
              basename=$(basename "$f" .tar.gz)
              target=$(echo "$basename" | sed -E 's/cubby-[0-9]+\.[0-9]+\.[0-9]+-//')
              
              # Map target triple to installer naming convention
              case "$target" in
                x86_64-unknown-linux-gnu)
                  final_name="cubby-linux-x86_64"
                  ;;
                aarch64-unknown-linux-gnu)
                  final_name="cubby-linux-aarch64"
                  ;;
                x86_64-apple-darwin)
                  final_name="cubby-darwin-x86_64"
                  ;;
                aarch64-apple-darwin)
                  final_name="cubby-darwin-aarch64"
                  ;;
                *)
                  echo "Unknown target: $target"
                  continue
                  ;;
              esac
              
              # Rename and upload the binary
              if [ -f "binaries-extracted/bin/cubby" ]; then
                mv "binaries-extracted/bin/cubby" "binaries-extracted/$final_name"
                echo "Uploading binaries-extracted/$final_name to r2:cubby-releases/latest/"
                rclone copy "binaries-extracted/$final_name" r2:cubby-releases/latest/ --s3-no-check-bucket --verbose
                rm -f "binaries-extracted/$final_name"
              fi
              
              # Clean up extracted files
              rm -rf binaries-extracted/bin
            fi
          done

  migrate-database:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Install dependencies
        working-directory: cubby-api
        run: pnpm install --frozen-lockfile

      - name: Run database migrations
        working-directory: cubby-api
        run: pnpm db:migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  deploy-cubby-api:
    needs: migrate-database
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Install dependencies
        working-directory: cubby-api
        run: pnpm install --frozen-lockfile

      - name: Deploy to Cloudflare Workers
        working-directory: cubby-api
        run: pnpm exec wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          STYTCH_PROJECT_ID: ${{ secrets.STYTCH_PROJECT_ID }}
          STYTCH_PROJECT_SECRET: ${{ secrets.STYTCH_PROJECT_SECRET }}
          STYTCH_PROJECT_DOMAIN: ${{ secrets.STYTCH_PROJECT_DOMAIN }}
          STYTCH_BASE_URL: ${{ secrets.STYTCH_BASE_URL }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
          ACCESS_CLIENT_ID: ${{ secrets.ACCESS_CLIENT_ID }}
          ACCESS_CLIENT_SECRET: ${{ secrets.ACCESS_CLIENT_SECRET }}
          TUNNEL_DOMAIN: ${{ secrets.TUNNEL_DOMAIN }}
          MCP_AUTH_SECRET: ${{ secrets.MCP_AUTH_SECRET }}

  deploy-exampleco-website:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Install dependencies
        working-directory: exampleco-website
        run: pnpm install --frozen-lockfile

      - name: Deploy to Cloudflare Workers
        working-directory: exampleco-website
        run: pnpm exec wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  deploy-cubby-installer:
    needs: detect-changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Install dependencies
        working-directory: cubby-installer
        run: pnpm install --frozen-lockfile

      - name: Deploy to Cloudflare Workers
        working-directory: cubby-installer
        run: pnpm exec wrangler deploy --minify
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
