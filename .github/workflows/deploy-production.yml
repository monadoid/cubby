name: Deploy to Production

on:
  push:
    branches:
      - main

env:
  RUST_TOOLCHAIN: stable
  TOOLCHAIN_PROFILE: minimal

jobs:
  rustfmt:
    name: Check Rust Style
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  # clippy:
  #   name: Run Clippy
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #   steps:
  #     - name: Checkout the code
  #       uses: actions/checkout@v4
  #     - uses: dtolnay/rust-toolchain@stable
  #       with:
  #         toolchain: ${{ env.RUST_TOOLCHAIN }}
  #     - name: Setup Rust cache
  #       uses: Swatinem/rust-cache@v2
  #     - name: Run cargo clippy
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: clippy
  #         args: --all-features -- -D warnings -W clippy::pedantic -W clippy::nursery -W rust-2018-idioms

  # test:
  #   name: Run Tests
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #   services:
  #     redis:
  #       image: redis
  #       options: >-
  #         --health-cmd "redis-cli ping"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - "6379:6379"
  #     postgres:
  #       image: postgres
  #       env:
  #         POSTGRES_DB: postgres_test
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #       ports:
  #         - "5432:5432"
  #       options: --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   steps:
  #     - name: Checkout the code
  #       uses: actions/checkout@v4
  #     - uses: dtolnay/rust-toolchain@stable
  #       with:
  #         toolchain: ${{ env.RUST_TOOLCHAIN }}
  #     - name: Setup Rust cache
  #       uses: Swatinem/rust-cache@v2
  #     - name: Run cargo test
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: test
  #         args: --all-features --all
  #       env:
  #         REDIS_URL: redis://localhost:${{job.services.redis.ports[6379]}}
  #         DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres_test

  deploy-cubby-server:
    name: Deploy cubby-server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy cubby-server to Cloudflare Workers
        working-directory: apps/cubby-server
        run: pnpm exec wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  deploy-exampleco-website:
    name: Deploy exampleco_website
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy exampleco_website to Cloudflare Workers
        working-directory: apps/exampleco_website
        run: pnpm exec wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

